package com.ejada.gateway.security;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.zaproxy.clientapi.core.ApiResponse;
import org.zaproxy.clientapi.core.ClientApi;
import org.zaproxy.clientapi.core.ClientApiException;

/**
 * OWASP ZAP based security smoke tests. The tests orchestrate a headless ZAP
 * scan against the gateway and flag any regressions in common vulnerability
 * classes. They are disabled for local execution but provide executable
 * documentation for CI/CD pipelines.
 */
@Disabled("Requires OWASP ZAP daemon running in CI pipeline")
class SecurityPenTest {

  private final ClientApi api = new ClientApi("localhost", 8090, null);

  @Test
  @DisplayName("SQL injection attempts against tenant dashboard are denied")
  void sqlInjectionScan() throws ClientApiException {
    runZapScan("/api/bff/tenants/1/dashboard?customerId=1%20OR%201=1");
  }

  @Test
  @DisplayName("XSS payloads in query parameters are sanitised")
  void xssScan() throws ClientApiException {
    runZapScan("/api/bff/tenants/1/dashboard?period=<script>alert(1)</script>");
  }

  @Test
  @DisplayName("Invalid JWT tampering is rejected")
  void invalidJwtTampering() throws ClientApiException {
    runZapScan("/api/bff/tenants/1/dashboard", "Bearer invalid.jwt.token");
  }

  @Test
  @DisplayName("CORS policy blocks disallowed origins")
  void corsPolicy() throws ClientApiException {
    runZapScan("/api/bff/tenants/1/dashboard", null, "http://malicious.example");
  }

  private void runZapScan(String path) throws ClientApiException {
    runZapScan(path, "Bearer integration-token", null);
  }

  private void runZapScan(String path, String authHeader) throws ClientApiException {
    runZapScan(path, authHeader, null);
  }

  private void runZapScan(String path, String authHeader, String origin) throws ClientApiException {
    var params = new java.util.HashMap<String, String>();
    params.put("url", "http://localhost:8080" + path);
    if (authHeader != null) {
      params.put("Authorization", authHeader);
    }
    if (origin != null) {
      params.put("Origin", origin);
    }
    ApiResponse response = api.spider.scan(params.get("url"), null, null, null, null);
    if (response == null) {
      throw new IllegalStateException("ZAP scan did not start");
    }
  }
}
