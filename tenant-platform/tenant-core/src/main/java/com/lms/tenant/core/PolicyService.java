package com.acme.tenant.core; import org.springframework.cache.annotation.Cacheable; import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.time.Instant; import java.util.*; import java.util.function.Supplier; @Service public class PolicyService{ private final NamedParameterJdbcTemplate jdbc; private final OverageService overageService; public PolicyService(NamedParameterJdbcTemplate jdbc, OverageService overageService){this.jdbc=jdbc;this.overageService=overageService;} @Cacheable(value="entitlements_cache", key="#tenantId") public Entitlements effective(UUID tenantId){return new Entitlements(tenantId, Instant.now());} @Transactional public EnforcementResult consumeOrOverage(UUID tenantId,String featureKey,long delta,Instant periodStart,Instant periodEnd,Supplier<Long> currentUsage,String idempotencyKey){ long used = currentUsage.get()==null?0:currentUsage.get(); long limit = 100; if(used + delta <= limit) return EnforcementResult.allowedWithinLimit(featureKey, limit, used, delta); var resp = overageService.record(tenantId, null, new com.acme.tenant.core.dto.RecordOverageRequest(featureKey, Math.min(delta, used+delta-limit), 0L, "USD", Instant.now(), periodStart, periodEnd, idempotencyKey, Map.of("reason","limit_exceeded"))); return EnforcementResult.allowedWithOverage(featureKey, limit, used, delta, Math.min(delta, used+delta-limit), resp.overageId()); } public record Entitlements(UUID tenantId, Instant computedAt){} public record EnforcementResult(boolean allowed,String featureKey,Long limit,long usedBefore,long requestedDelta,long overageRecorded,UUID overageId){ public static EnforcementResult allowedWithinLimit(String f, Long l, long u,long d){return new EnforcementResult(true,f,l,u,d,0,null);} public static EnforcementResult allowedWithOverage(String f, Long l, long u,long d,long overQty,UUID id){return new EnforcementResult(true,f,l,u,d,overQty,id);} } }