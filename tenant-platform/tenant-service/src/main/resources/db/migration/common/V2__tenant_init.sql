-- TENANT master table (soft-delete aware)

-- If you rely on a specific schema via Hibernate (hibernate.default_schema),
-- you usually don't need to set search_path here.

CREATE TABLE IF NOT EXISTS tenants (
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code            VARCHAR(64)  NOT NULL,
    name            VARCHAR(128) NOT NULL,
    contact_email   VARCHAR(255),
    contact_phone   VARCHAR(32),

    active          BOOLEAN NOT NULL DEFAULT TRUE,
    is_deleted      BOOLEAN NOT NULL DEFAULT FALSE,

    created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- Lightweight email format guard (optional; app-level validation is still recommended)
    CONSTRAINT ck_tenant_email_format
        CHECK (contact_email IS NULL OR contact_email ~* '^[A-Z0-9._%+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$')
);

COMMENT ON TABLE tenants IS 'Multi-tenant master table with soft-delete support';
COMMENT ON COLUMN tenants.code IS 'Unique tenant code (unique while is_deleted = false)';
COMMENT ON COLUMN tenants.name IS 'Tenant display name (case-insensitive unique while is_deleted = false)';

-- Reusable trigger function to keep updated_at in sync
CREATE OR REPLACE FUNCTION trg_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- BEFORE UPDATE trigger to update updated_at
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'set_timestamp_on_tenants'
  ) THEN
    CREATE TRIGGER set_timestamp_on_tenants
    BEFORE UPDATE ON tenants
    FOR EACH ROW
    EXECUTE FUNCTION trg_set_timestamp();
  END IF;
END $$;
