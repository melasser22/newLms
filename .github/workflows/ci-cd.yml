name: CI-CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: \\${{ github.repository }}

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: \\${{ runner.os }}-maven-\\${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            \\${{ runner.os }}-maven-
      - name: Build
        run: mvn -B -ntp clean verify

  sonar:
    name: SonarQube Quality Gate
    needs: build
    runs-on: ubuntu-22.04
    env:
      SONAR_HOST_URL: \\${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: \\${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.2.0
        with:
          args: >-
            -Dsonar.projectKey=newLms-api-gateway
            -Dsonar.projectName="LMS API Gateway"
            -Dsonar.sources=.
            -Dsonar.java.binaries=**/target/classes

  security:
    name: Security Scan
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Build container image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:ci .
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: $REGISTRY/$IMAGE_NAME:ci
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

  push:
    name: Publish Image
    needs: [security, sonar]
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: \\${{ env.REGISTRY }}
          username: \\${{ github.actor }}
          password: \\${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            \\${{ env.REGISTRY }}/\\${{ env.IMAGE_NAME }}:latest
            \\${{ env.REGISTRY }}/\\${{ env.IMAGE_NAME }}:\\${{ github.sha }}

  deploy:
    name: Canary Deploy to Staging
    needs: push
    runs-on: ubuntu-22.04
    environment:
      name: staging
      url: https://staging.lms.example.com
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: '1.29.3'
      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "\\${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
      - name: Deploy canary
        run: |
          kustomize build deploy/kustomize/overlays/staging | kubectl apply -f -
          kubectl rollout status deploy/api-gateway-api-gateway -n lms-staging
          kubectl annotate deploy/api-gateway-api-gateway -n lms-staging canary.weight=10 --overwrite
      - name: Promote canary on success
        if: success()
        run: |
          kubectl annotate deploy/api-gateway-api-gateway -n lms-staging canary.promote="\\${{ github.sha }}" --overwrite
